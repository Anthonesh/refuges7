security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_user_provider:
            entity:
                class: App\Entity\Utilisateurs
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\LoginAuthenticator
            logout:
                path: app_logout
                target: app_index
                # where to redirect after logout
                # target: app_any_route
            # form_login:
            #     target_path_parameter: app_index
            #     failure_path_parameter: app_register

            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800
                path: /
                token_provider:
                    doctrine: true
                samesite: strict  # Option pour limiter l'envoi du cookie aux mêmes sites, amélioration sécurité attaques Cross Site Request Forgery
                httponly: true  # Empêche l'accès au cookie via JavaScript pour des raisons de sécurité, amélioration securité contre XSS
                secure: true  # Indique que le cookie doit être envoyé uniquement sur une connexion HTTPS sécurisée

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin, roles: ROLE_ADMIN, requires_channel: https }
        - { path: ^/, requires_channel: https }
    
    role_hierarchy:
        ROLE_ADMIN:       ROLE_USER
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
